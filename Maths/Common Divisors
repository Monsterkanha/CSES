Use vector as a map to get the count.


int n;
cin>>n;
vector<int> arr(n);
int maxN = 0;
for(int i= 0; i < n; i++){
    cin>>arr[i];
    maxN = max(maxN, arr[i]);
}

vector<int> div(maxN+1);

int ans = 1;
for(int i = 0 ; i < n; i++){
    int x = arr[i];
    for(int j = 1 ; j <= sqrt(x) ; j++){
        if(x % j == 0){
            div[j]++;
            if(x / j != j){
                div[x/j]++;
            }   
        }
    }
}
for(int i = maxN; i >= 1; i--){
    if(div[i] > 1){
        ans = i;
        break;
    }
}
cout<<ans<<nl;


Time Complexity :- assume n = max(xi);
 n
___
\    n/i  = nlog(n);
/__

i = 1


2. Using the Given a value, x, we can check whether a pair has a GCD equal to x by
checking all the multiples of x. With that information, loop through all
possible values of $x$ and check if it is a divisor to two or more values. This
works in $\mathcal{O}(\max(x_i)\log(\max(x_i)))$ since

$$\sum_{i = 1}^{\max(x_i)} \max(x_i)/i \approx \max(x_i)\log(\max(x_i)).$$




#include <bits/stdc++.h>
using namespace std;

const int MAX_VAL = 1e6;

// occ_num[i] contains the numer of times i occurrs in the array
int occ_num[MAX_VAL + 1];

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int x;
		cin >> x;
		occ_num[x]++;
	}

	// go through all possible gcd's
	for (int gcd = MAX_VAL; gcd > 0; gcd--) {
		// see how many numbers of the array have this number as a divisor
		int div = 0;
		for (int j = gcd; j <= MAX_VAL; j += gcd) {
			div += occ_num[j];
		}
		if (div >= 2) {
			cout << gcd << endl;
			break;
		}
	}
}
