Here, we are sorting customer on the basis of their arrival time.
Now, we can iterate through the customers while maintaining a minimum priority queue that stores the departure times of customers we've already processed.
For each customer, we check to see if the minimum element in the priority queue is less than the arrival time of the new customer.

1. If this is true, that means a room previously occupied has opened up, so we remove the minimum element from the priority queue and replace it with the new customer's departure time.
The new customer will be allocated to the same room as the customer who departed.
2. Otherwise, all the rooms are full, so we need to allocate another room for the customer and add it to the priority queue.
Cleanest way to implement minpq is insert negative elements.




#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

const int MAX_N = 2e5;

int N;
int ans[MAX_N];
vector<pair<pair<int, int>, int>> v(MAX_N);

int main() {
	cin >> N;
	v.resize(N);
	for (int i = 0; i < N; i++) {
		cin >> v[i].first.first >> v[i].first.second;
		v[i].second = i; // store the original index
	}
	sort(v.begin(), v.end());

	int rooms = 0, last_room = 0;
	priority_queue<pair<int, int>> pq; // min heap to store departure times.
	for (int i = 0; i < N; i++) {
		if (pq.empty()) {
			last_room++;
			// make the departure time negative so that we create a min heap
			// (cleanest way to do a min heap... default is max in c++)
			pq.push(make_pair(-v[i].first.second, last_room));
			ans[v[i].second] = last_room;
		}
		else {
			// accessing the minimum departure time
			pair<int, int> minimum = pq.top();
			if (-minimum.first < v[i].first.first) {
				pq.pop();
				pq.push(make_pair(-v[i].first.second, minimum.second));
				ans[v[i].second] = minimum.second;
			}

			else {
				last_room++;
				pq.push(make_pair(-v[i].first.second, last_room));
				ans[v[i].second] = last_room;
			}
		}

		rooms = max(rooms, int(pq.size()));
	}


	cout << rooms << "\n";
	for (int i = 0; i < N; i++) {
		cout << ans[i] << " ";
	}
}




2.



#include <bits/stdc++.h>
using namespace std;

class Guest{
	public:
	int ar{}, dt{}, id {};
	
};

bool cmp(const Guest& a ,const Guest& b){
	if(a.ar == b.ar){
		return a.dt > b.dt;
	}
	return a.ar < b.ar;
}

int32_t main () {
	// freopen("diamond.in", "r", stdin);
	// freopen("diamond.out", "w", stdout);
	ios_base::sync_with_stdio(0);
    cin.tie(0);
	int n, a,b;
	cin>>n;
	vector<Guest> arr;
	for(int i= 0; i < n; i++){
		int a, b;
		cin>>a>>b;
		arr.push_back(Guest({a,1,i}));
		arr.push_back(Guest({b,-1,i}));
	}
	
	sort(arr.begin() , arr.end() , cmp);
	
	vector<int> ans(n);
	int cnt = 0 , rooms = 0;
	for(int i = 0; i < 2*n; i++){
		cnt += arr[i].dt;
		rooms = max(rooms, cnt);
	}
	set<int> s;
	for(int i = 1; i <= rooms; i++){
		s.insert(i);
	}
	for(int i= 0 ; i < 2*n; i++){
		if(arr[i].dt == 1){
			ans[arr[i].id] = *s.begin();
			s.erase(*s.begin());
		}
		else{
			s.insert(ans[arr[i].id]);
		}
	}
	cout<<rooms<<"\n";
	for(auto& x: ans){
		cout<<x<<" ";
	}
}
